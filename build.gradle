plugins {
    id 'architectury-plugin' version "$architectury_plugin_version"
    id 'com.github.johnrengelman.shadow' version "$shadow_version"
    id 'dev.architectury.loom' version "$loom_version" apply false
}

allprojects {
    apply plugin: 'java'
//	apply plugin: 'dev.lazurite.abacus'

    version rayon_version
    group maven_group

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(16)
        }

        withSourcesJar()
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    archivesBaseName = rootProject.archivesBaseName + '-' + name
    loom.silentMojangMappingsLicense()

    repositories {
        maven {
            name 'Lazurite'
            url 'https://lazurite.dev/releases'
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        mappings loom.officialMojangMappings()
    }

    if (name.contains('fabric') || name.contains('forge')) {
        apply plugin: 'com.github.johnrengelman.shadow'
        architectury.platformSetupLoomIde()
        architectury.fabric()
        architectury.forge()

        if (!name.contains('rayon-core')) {
            sourceSets {
                testmod {
                    compileClasspath += main.compileClasspath
                    runtimeClasspath += main.runtimeClasspath
                }
            }

            dependencies {
                testmodImplementation sourceSets.main.output
            }
        }

        configurations {
            common
            shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
            compileClasspath.extendsFrom common
            runtimeClasspath.extendsFrom common
        }

        dependencies {
            common("com.github.stephengold:Libbulletjme:$libbulletjme_version")
        }

        shadowJar {
            configurations = [project.configurations.shadowCommon]
        }

        remapJar {
            dependsOn shadowJar
            input.set shadowJar.archiveFile
        }

        sourcesJar {
			from project(":" + project.name.split("-")[0] + '-' + project.name.split("-")[1] + "-common").sourceSets.main.allSource
        }

        components.java {
            withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
                skip()
            }
        }
    }

    publishing {
        repositories {
            maven {
                name 'Lazurite'
                url 'https://lazurite.dev/releases'

                credentials {
                    username property('publish.lazurite.alias')
                    password property('publish.lazurite.secret')
                }
            }
        }
    }
}